{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The goal of this repository is to document the creation of a simple Internal Developer Platform for me (Platformoon). </p> <p>This repository is a collection of documents that explain the different parts of the platform, decisions, and how I build it.</p>"},{"location":"#why","title":"Why?","text":"<p>I am a Software Engineer at MercadoLibre and I am working on the Cloud &amp; Platform TEAM creating developer toolings on top of Fury (an internal platform here), it is a great experience for me. </p> <p>With this initiative I want to build a simple an IDP skeleton to learn more about CNCF toolings and to share it with you!</p> <p>Disclaimer</p> <p>I know that it is not a real platform, but I want to learn more about this topic and I want to learn more about CNCF toolings and to share it with you.</p>"},{"location":"#platform-engineering-on-kubernetes-book","title":"Platform Engineering on Kubernetes Book","text":"<p>I am creating this repository having as a reading/reference the book Platform Engineering on Kubernetes by Mauricio Salatino. </p> <p>I contributed with some part of the code sample of the book in this repository and feel free to contribute too.</p>"},{"location":"archictecture/","title":"Introduction","text":"<p>I want that the architecture should be simple and easy to understand. I want to use the power of Kubernetes to create a simple platform that can be used by developers to deploy their applications.</p> <p>I will use a monolithic architecture to create the platform. Is simple to start and to understand too.</p>"},{"location":"archictecture/#architecture","title":"Architecture","text":"<p>The architecture will be composed of the following components:</p> <ul> <li>Kubernetes Cluster</li> <li>Platformoon API (Java/Quarkus)</li> <li>Platformoon Frontend (NextJS)</li> <li>Platformoon CLI (GoLang)</li> <li>Platformoon Documentation (mkdocs)</li> <li>Keycloak</li> </ul> <p>The main goal here is to learn and to get out from comfort zone. I hope that you can learn something too.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#allow-the-user-to-create-an-application-through-the-cli","title":"Allow the user to create an application through the CLI","text":"<p>The command should be something like this:</p> <pre><code>    platformoon create application --name=app --kind=backend\n</code></pre> <p>The result of this operation should be:</p> <ul> <li>The repository created on Github</li> <li>The application stored to be retrieved later</li> </ul>"},{"location":"features/#what-is-necessary-to-do-it","title":"What is necessary to do it?","text":"<ul> <li>Create an organization on Github</li> <li>Get the token from Github</li> <li>Create a repository on Github for the API</li> <li>Create a repository for the CLI</li> </ul> <p>Note</p> <p>For now, I will not install Keycloak and the communication between the CLI and the API will be unsafe.</p>"},{"location":"strategies/","title":"What we need first?","text":"<p>Before all, I think that we need to define what initial applications types we need to support.</p> <p>We will support only backend applications written in Go only.</p> <p>The application will be those fields:</p> <ul> <li>Name</li> <li>Description</li> <li>Repository URL (Generated by the platform)</li> <li>Technology</li> <li>Kind (backend)</li> </ul> <p>It is all, we do not need to support initially more than one backend application type. We will get the feeling configuring pipelines, deployments for one application type and then we will be able to extend the platform to support more application types.</p>"},{"location":"strategies/pipelines/","title":"Pipelines","text":"<p>To run our Platform pipelines I want to use GithubActions + Dagger. Dagger is a tool that allows us to run our pipelines locally. Dagger was born with this main goal: </p> <p>\u201cto enable developers to build pipelines using their favorite programming language that they can run everywhere\u201d.</p> <p>I like this because we can use the power of the GoLang combined with the power of Dagger to create our pipelines.</p>"},{"location":"strategies/pipelines/#what-we-need-first","title":"What we need first?","text":"<p>I think that is a good idea to create a repository to store all our pipelines. This repository will be called <code>platformoon-pipelines</code>. I will do it manually with Github.</p>"},{"location":"tutorials/","title":"Creating a Kubernetes cluster in Docker cluster with Ingress Controller","text":"<p>More details about the following steps can be found here. <pre><code>cat &lt;&lt;EOF | kind create cluster --name dev --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\n- role: worker\n- role: worker\n- role: worker\nEOF\n</code></pre></p> <p>After you need to set up the context.</p> <pre><code>kubectl cluster-info --context kind-dev\n</code></pre>"},{"location":"tutorials/#installing-the-nginx-ingress-controller","title":"Installing the NGINX Ingress Controller","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n</code></pre>"},{"location":"tutorials/pipelines/","title":"Getting Started","text":"<p>To get started with pipelines and Tekton you need a Kubernetes cluster.</p> <p>We are use KinD installed on this tutorial Installing KinD</p>"},{"location":"tutorials/pipelines/#installing-tekton","title":"Installing Tekton","text":""},{"location":"tutorials/pipelines/#why-tekton","title":"Why Tekton?","text":"<p>I wanted to learn more about Tekton and I decided to use it on this project. Tekton is a powerful and flexible open-source framework for creating CI/CD systems, allowing developers to build, test, and deploy across cloud providers and on-premise systems. It is built on Kubernetes, providing the benefits of an open-source, cloud-native experience from pipeline creation to execution.</p> <p>For more details see the official documentation.</p>"},{"location":"tutorials/pipelines/#intalling-tekton-pipelines","title":"Intalling Tekton Pipelines","text":"<pre><code>kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml\n</code></pre>"},{"location":"tutorials/pipelines/#installing-tekton-trigger","title":"Installing Tekton Trigger","text":"<pre><code>kubectl apply --filename \\\nhttps://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml\nkubectl apply --filename \\\nhttps://storage.googleapis.com/tekton-releases/triggers/latest/interceptors.yaml\n</code></pre>"},{"location":"tutorials/pipelines/#installing-tekton-dashboard","title":"Installing Tekton Dashboard","text":"<pre><code>kubectl apply -f https://github.com/tektoncd/dashboard/releases/download/v0.33.0/release.yaml\n</code></pre> <p>You can access the dashboard using the following command:</p> <pre><code>kubectl port-forward svc/tekton-dashboard  -n tekton-pipelines 9097:9097\n</code></pre>"},{"location":"tutorials/pipelines/#installing-git-clone-and-buildpacks-tasks-from-tekton-hub","title":"Installing git-clone and buildpacks tasks from Tekton Hub","text":"<p>In this step we will install two tekton tasks from Tekton Hub, the git-clone and the buildpacks.</p> <p><code>git-clone</code> is a task that clones a git repository into a <code>Workspace</code> volume.</p> <p><code>buildpacks</code> is a task that builds an application using Cloud Native Buildpacks.</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.9/git-clone.yaml\nkubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/master/task/buildpacks/0.6/buildpacks.yaml\n</code></pre>"},{"location":"tutorials/pipelines/#installing-tekton-objects","title":"Installing Tekton Objects","text":"<pre><code>kubectl apply -f tekton/ci\n</code></pre>"},{"location":"tutorials/pipelines/#installing-ingress-controller-for-tekton","title":"Installing Ingress Controller for Tekton","text":"<pre><code>kubectl apply -f tekton/ingress.yaml\n</code></pre> <p>Now we have a webhook configured and we can run the pipeline using the following command:</p> <pre><code>curl --request POST \\\n  --url http://localhost/tkn/webhook \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"url\": \"https://github.com/platformoon/destroyer-server.git\",\n    \"revision\": \"main\",\n    \"applicationName\": \"destroyer-server\",\n    \"action\": \"build\"\n}'\n</code></pre> <p>You can see the pipeline running at http://tekton.localhost.</p>"}]}